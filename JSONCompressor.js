// Generated by CoffeeScript 1.7.1
(function() {
  window.JSONCompressor = (function() {
    var DEFAULT_KEY, traverse;

    DEFAULT_KEY = "__m";

    traverse = function(json, callback) {
      var helper, idx, key, val, _i, _len;
      helper = (function(_this) {
        return function(k, v, obj) {
          if (v instanceof Object) {
            traverse(v, callback);
          }
          if (typeof callback === "function") {
            callback(k, v, obj);
          }
          return _this;
        };
      })(this);
      if (json instanceof Array) {
        for (idx = _i = 0, _len = json.length; _i < _len; idx = ++_i) {
          val = json[idx];
          helper(idx, val, json);
        }
      } else if (json instanceof Object) {
        for (key in json) {
          val = json[key];
          helper(key, val, json);
        }
      }
      return this;
    };

    JSONCompressor.compress = function(json, inPlace, key) {
      var charsSaved, count, counts, elem, map, name, nameLength, sorted, _i, _len;
      if (inPlace == null) {
        inPlace = false;
      }
      if (key == null) {
        key = DEFAULT_KEY;
      }
      if (inPlace === false) {
        json = JSON.parse(JSON.stringify(json));
      }
      counts = {};
      traverse(json, function(k, v, obj) {
        if (!(obj instanceof Array)) {
          if (counts[k] != null) {
            counts[k]++;
          } else {
            counts[k] = 1;
          }
        }
        return true;
      });
      sorted = [];
      for (name in counts) {
        count = counts[name];
        sorted.push({
          name: name,
          count: count
        });
      }
      sorted.sort(function(a, b) {
        if (a.count < b.count) {
          return 1;
        }
        if (b.count < a.count) {
          return -1;
        }
        return 0;
      });
      map = [];
      charsSaved = -4 - key.length;
      for (_i = 0, _len = sorted.length; _i < _len; _i++) {
        elem = sorted[_i];
        nameLength = elem.name.length;
        charsSaved += (nameLength - ("" + map.length).length) * elem.count - nameLength - 1;
        map.push(elem.name);
      }
      if (charsSaved > 0) {
        traverse(json, function(k, v, obj) {
          if (!(obj instanceof Array)) {
            obj[map.indexOf(k)] = obj[k];
            return delete obj[k];
          }
        });
        json[key] = map;
      }
      return json;
    };

    JSONCompressor.decompress = function(json, inPlace, key) {
      var map;
      if (inPlace == null) {
        inPlace = false;
      }
      if (key == null) {
        key = DEFAULT_KEY;
      }
      if (inPlace === false) {
        json = JSON.parse(JSON.stringify(json));
      }
      if ((map = json[key]) != null) {
        traverse(json, function(k, v, obj) {
          if (k !== key) {
            obj[map[k]] = obj[k];
            return delete obj[k];
          }
        });
      }
      return json;
    };

    function JSONCompressor(inPlace, key) {
      this.inPlace = inPlace != null ? inPlace : false;
      this.key = key != null ? key : DEFAULT_KEY;
      if (this.inPlace !== false) {
        this.inPlace = true;
      }
      if (!(this.key instanceof String)) {
        this.key = DEFAULT_KEY;
      }
    }

    JSONCompressor.prototype.compress = function(json) {
      return JSONCompressor.compress(json, this.inPlace, this.key);
    };

    JSONCompressor.prototype.decompress = function(json) {
      return JSONCompressor.decompress(json, this.inPlace, this.key);
    };

    JSONCompressor.prototype.test = function(n, inPlace) {
      var compressed, decompressed, e, i, s, _i;
      if (n == null) {
        n = 100;
      }
      if (inPlace == null) {
        inPlace = false;
      }
      s = Date.now();
      for (i = _i = 0; 0 <= n ? _i < n : _i > n; i = 0 <= n ? ++_i : --_i) {
        compressed = this.compress(bigJSON, inPlace);
        decompressed = this.decompress(compressed, inPlace);
      }
      e = Date.now();
      return console.log(e - s);
    };

    return JSONCompressor;

  })();

}).call(this);
